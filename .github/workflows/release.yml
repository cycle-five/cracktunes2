name: Release

on:
  push:
    branches: [ main, master ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            pkg-config \
            libssl-dev \
            libopus-dev \
            ffmpeg \
            python3
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.85.0
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Run tests
        run: cargo test --all

  build-and-release:
    name: Build and Release
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            pkg-config \
            libssl-dev \
            libopus-dev \
            ffmpeg \
            python3
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.85.0
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Build release binary
        run: cargo build --release
      
      - name: Get version from Cargo.toml
        id: get_version
        run: echo "version=$(grep '^version' Cargo.toml | sed 's/.*= "\(.*\)".*/\1/')" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            target/release/cracktunes
            LICENSE
            README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/cracktunes:latest
            ghcr.io/${{ github.repository_owner }}/cracktunes:v${{ steps.get_version.outputs.version }}
      
      - name: Send release notification
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "New Release Published"
          description: "Version v${{ steps.get_version.outputs.version }} has been released! Docker image is available at ghcr.io/${{ github.repository_owner }}/cracktunes:v${{ steps.get_version.outputs.version }}"
          color: 0x00FF00
          username: "GitHub Actions"
